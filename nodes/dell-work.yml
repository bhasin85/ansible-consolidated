
- hosts: 131.217.38.36

  tasks:
    # hostname?

    # - include: >
    #    ../roles/distribution/tasks/main.yml
    #    mirror=http://mirror.aarnet.edu.au/debian
    #    template=debian.j2
    #    version=testing
    #    upgrade=safe


    # zfs playbook must be from /root
    # - role: zfs

    - include: ../roles/common/tasks/basic.yml
    - include: ../roles/common/tasks/disable-shell-bell.yml


    ###################################
    - apt: name=memtest86


    ###################################
    - lineinfile: dest=/etc/sysctl.conf backup=true state=present regexp='.*net.ipv4.ip_forward.*' line='net.ipv4.ip_forward = 1'
      notify: reload-sysctl

    - apt: name=bridge-utils

    - copy:
        dest: /etc/network/interfaces
        content: |
          # deployed by ansible!
          # The loopback network interface
          auto lo
          iface lo inet loopback

          # The primary network interface
          allow-hotplug eth0
          iface eth0 inet dhcp

          auto br0
          iface br0 inet static
            address 10.1.1.1
            netmask 255.255.255.0
            bridge_ports dummy0
            bridge_stp off
            bridge_fd 0

      notify: restart-br0


    ###################################
    - apt: name=alsa-oss
    - apt: name=alsa-utils
    - apt: name=alsa-tools

    - copy:
        dest: /etc/modprobe.d/alsa-base.conf
        content: |
          # deployed by ansible!
          # hdmi and cth reversed
          options snd_hda_intel enable=0,1

          # hardware beep off
          options snd_hda_intel beep_mode=0
          blacklist pcspkr
      notify: reboot

    - name: Initialize alsa
      # command: bash -c "/usr/sbin/alsactl"
      command: /usr/sbin/alsactl
      args:
        creates: /var/lib/alsa/asound.state
      notify: reboot


    ###################################
    - name: Wifi firmware
      apt: name=firmware-iwlwifi

    - name: Modprobe
      modprobe: name=iwlwifi state=present

    - name: Bring up interface
      command: /sbin/ifconfig wlp2s0 up

    - apt: name=wpasupplicant
    - apt: name=wicd-curses

    ###################################
    - copy:
        dest: /home/meteo/.xinitrc
        content: |
          # deployed by ansible!
          xrdb -merge <<- EOF
            XTerm*selectToClipboard: true
            XTerm*faceName: DejaVu Sans Mono
            XTerm*faceSize: 10 ! desktop
            ! XTerm*faceSize: 15   ! laptop
            XTerm*Background: white
            XTerm*Foreground: black
          EOF

          xmodmap - <<- EOF
            keycode 90 = Insert NoSymbol Insert
          EOF

          if true; then
            # Warning - turns off laptop display!
            xrandr --auto --output DP1-1 --mode 1920x1200 --primary
            xrandr --auto --output DP1-2 --mode 1280x1024 --right-of DP1-1
            xrandr --output eDP1 --off
           desktop
          fi

          # xrandr --output eDP1 --brightness .65
          # xset -dpms; xset s off
          # to turn on trackpad tap to select/button
          synclient TapButton1=1
          xset b off
          # xset q | grep bell
          xmonad


    ###################################
    - apt: name=cups

    - shell: lpstat -p | grep -q ImosLexmark
      register: have_printer
      ignore_errors: yes
      changed_when: "have_printer.rc != 0"

    # TODO a more relative path?
    - copy: src=../roles/common/files/lexmark.ppd dest=/tmp

    - shell: |
        # install
        lpadmin \
          -p 'ImosLexmark' \
          -v 'socket://10.76.8.20:9100' \
          -P '/tmp/lexmark.ppd' \
          -E
        # set default
        lpadmin -d ImosLexmark
      when: "have_printer.rc != 0"


    ###################################
    # pulled in by .bashrc
    - copy:
        dest: /home/meteo/paths
        content: |
          # deployed by ansible!
          . $HOME/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true

          export BERKS_HOME=$HOME/.chefdk/gem/ruby/2.1.0/bin
          export PATH="$BERKS_HOME:$PATH"

          export JAVA_HOME=/home/meteo/imos/jdk1.7.0_80
          export PATH="$JAVA_HOME/bin:$PATH"

          export GRAILS_HOME=/home/meteo/imos/grails-1.3.7/
          export PATH="$PATH:$GRAILS_HOME/bin"

          export HISTTIMEFORMAT="%T " # "

          # locations
          export I=$HOME/imos
          alias i="cd $I"
          export A=$HOME/ansible-tests
          alias a="cd $A"

    - include: ../roles/common/tasks/grails-1.3.7.yml

    # TODO add devenv and desktop...
    # - include: ./roles/common/tasks/devenv.yml

    - apt: name=maven
    - apt: name=postgresql-client-9.4

    # - include: "./roles/common/tasks/jdk.yml"


    # make sure systemd is installed
    - apt: name=systemd-container
      when: (ansible_distribution == "Debian" and ansible_distribution_major_version > "8")

    - apt: name=debootstrap



    # Using local dnsmasq as a wholesale replacement for using resolvconf is a lot simpler
    # issue is we want to ping containers from the host,
    # so make local dns authoritative
    - apt: name=dnsmasq
    - copy:
        dest: /etc/dnsmasq.d/container-dns
        content: |
          # deployed by ansible!
          interface=br0
          log-queries
          log-dhcp
          no-resolv
          server=131.217.0.19
          server=144.6.0.19
          expand-hosts
          domain=container
          dhcp-range=br0,10.1.1.10,10.1.1.20,4h
          dhcp-host=00:01:04:1b:2C:1C,portal,10.1.1.14
          dhcp-host=00:01:04:1b:2C:1F,geonetwork3,10.1.1.15
          dhcp-host=00:01:04:1b:2C:1E,apache,10.1.1.16
          dhcp-host=00:01:04:1b:2C:1D,aatams,10.1.1.17
          dhcp-host=00:01:04:1b:2C:1B,geonetwork2,10.1.1.18
          dhcp-host=00:01:04:1b:2C:1A,jessie,10.1.1.19
      notify: restart-dnsmasq

    # TODO - this doesn't clear the file first
    # maybe change nameserver to 127.0.0.1
    # also add domain, search?
    - copy:
        dest: /etc/resolv.conf
        content: |
          # deployed by ansible!
          nameserver 10.1.1.1

    # IMPORTANT for complete files not just blocks, could simply use shell maybe with <<-EOF type stuff

    # http://unix.stackexchange.com/questions/174349/what-overwrites-etc-resolv-conf-on-every-boot
    - copy:
        dest: /etc/dhcp/dhclient-enter-hooks.d/nodnsupdate
        mode: 0777
        content: |
          #!/bin/sh
          # deployed by ansible!
          make_resolv_conf() {
              :
          }

    - apt: name=iptables-persistent
    - copy:
        dest: /etc/iptables-rules
        content: |
          # deployed by ansible!
          iptables -t nat --flush PREROUTING
          # iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080
          # redirect to apache
          iptables -t nat -A PREROUTING -p tcp --dport 80 -i eth0 -j DNAT --to 10.1.1.16
          # bridge postrouting

          # TODO genericize NAT postrouting with appropriate subnetwork masks
          iptables -t nat --flush POSTROUTING
          iptables -t nat -A POSTROUTING -s '10.1.1.0/24' -j MASQUERADE
          # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=717217
          # TODO - fill in checksums for all udp...
          iptables -t mangle --flush POSTROUTING
          iptables -t mangle -A POSTROUTING -p udp --dport bootpc -j CHECKSUM --checksum-fill
      notify: reconfigure-iptables



  handlers:
    - include: ../roles/common/handlers/main.yml

